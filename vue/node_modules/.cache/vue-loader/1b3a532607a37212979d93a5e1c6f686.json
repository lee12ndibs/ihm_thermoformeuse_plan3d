{"remainingRequest":"/home/romain/Bureau/Projet/Thermoformeuse/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/romain/Bureau/Projet/Thermoformeuse/vue/src/components/Graphe.vue?vue&type=style&index=0&id=44207203&scoped=true&lang=css&","dependencies":[{"path":"/home/romain/Bureau/Projet/Thermoformeuse/vue/src/components/Graphe.vue","mtime":1583073423889},{"path":"/home/romain/Bureau/Projet/Thermoformeuse/vue/node_modules/css-loader/dist/cjs.js","mtime":1583073423062},{"path":"/home/romain/Bureau/Projet/Thermoformeuse/vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1583073423672},{"path":"/home/romain/Bureau/Projet/Thermoformeuse/vue/node_modules/postcss-loader/src/index.js","mtime":1583073423386},{"path":"/home/romain/Bureau/Projet/Thermoformeuse/vue/node_modules/vuetify-loader/lib/loader.js","mtime":1583073423699},{"path":"/home/romain/Bureau/Projet/Thermoformeuse/vue/node_modules/cache-loader/dist/cjs.js","mtime":1583073422949},{"path":"/home/romain/Bureau/Projet/Thermoformeuse/vue/node_modules/vue-loader/lib/index.js","mtime":1583073423672}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpzdmd7CiAgbWFyZ2luOiAyNXB4Owp9CnBhdGh7CiAgZmlsbDogbm9uZTsKICBzdHJva2U6ICM3NkJGOEE7CiAgc3Ryb2tlLXdpZHRoOiAzcHg7Cn0K"},{"version":3,"sources":["Graphe.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Graphe.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <svg width=\"500\" height=\"270\">\n    <g style=\"transform: translate(0, 10px)\">\n    </g>\n  </svg>\n</template>\n\n<script>\nimport * as d3 from 'd3';\nexport default {\n  name: 'vue-line-chart',\n  data: () => ({\n      data: [140, 108, 2800, 170, 230, 242],\n      timer: undefined\n      // line: '',\n    }),\n  mounted() {\n    this.createGraph();\n    this.timer = setInterval(this.changeData, 1000);\n  },\n  destroyed: function(){\n    clearInterval(this.timer);\n  },\n  watch:{\n    data: function(){\n      console.log('a');\n      // this.createGraph();\n    },\n  },\n  methods: {\n    changeData(){\n      console.log(this.data);\n      // for (let i = 0; i<this.data.length; i++){\n      //   this.data[i] = Math.floor((Math.random() * 100) + 100);\n      // }\n      this.data = [Math.floor((Math.random() * 200) + 100),Math.floor((Math.random() * 200) + 100),Math.floor((Math.random() * 200) + 100),Math.floor((Math.random() * 200) + 100),Math.floor((Math.random() * 200) + 100),Math.floor((Math.random() * 200) + 100)];\n\n    },\n    getScales() {\n      const x = d3.scaleTime().range([0, 430]);\n      const y = d3.scaleLinear().range([210, 0]);\n      d3.axisLeft().scale(x);\n      d3.axisBottom().scale(y);\n      x.domain(d3.extent(this.data, (d, i) => i));\n      y.domain([0, d3.max(this.data, d => d)]);\n      return { x, y };\n    },\n    createGraph() {\n      var Largeur_graphe = 500, Hauteur_graphe = 400, Espacement_barres = 10;\n      var Largeur_barres = (Largeur_graphe / this.data.length);\n\n      var margeX = 20;\n      // var margeY = 10;\n\n      var AxeY = d3.scaleLinear().domain(this.data).range([0,Hauteur_graphe]);\n\n      var AxeX = d3.scalePoint().domain([\"Zone 1\",\"Zone 2\",\"Zone 3\",\"Zone 4\",\"Zone 5\",\"Zone 6\"])\n                                .range([0,Largeur_graphe])\n                                .padding(.45);\n\n\n      /*FAUT QUE JE TROUVE LE MOYEN DE GÉNÉRER LA BALISE SVG DEPUIS LE JS (c'est un truc spécial apparemment)*/\n      /* C'est un début ...\n      var s = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n      s.setAttribute(\"class\", \"chart\");\n      s.innerHTML = data;\n      document.body.appendChild(s);*/\n\n      var svg = d3.select('svg')\n          .attr(\"width\", Largeur_graphe)\n          .attr(\"height\", Hauteur_graphe);\n\n\n      svg.selectAll(\"rect\")\n          .data(this.data)\n          .enter()\n          .append(\"rect\")\n          .attr(\"fill\", function(d) {\n            if (d <= 300) {\n              return \"steelblue\";\n            }\n            return \"red\";\n          })\n          .attr(\"y\", function(d) {\n               return Hauteur_graphe - d;\n          })\n          .attr(\"height\", function(d) {\n              return d - margeX;\n          })\n          .attr(\"width\", Largeur_barres - Espacement_barres)\n          .attr(\"transform\", function (d, i) {\n              var translate = [Largeur_barres * i, 0];\n              return \"translate(\"+ translate +\")\";\n          });\n\n\n      svg\n      .append(\"g\")\n      .call(d3.axisLeft(AxeY));\n\n      svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(0,\"+(Hauteur_graphe-margeX)+\")\")\n      .call(d3.axisBottom(AxeX));\n    },\n  },\n};\n</script>\n\n<style scoped>\n  svg{\n    margin: 25px;\n  }\n  path{\n    fill: none;\n    stroke: #76BF8A;\n    stroke-width: 3px;\n  }\n</style>\n"]}]}