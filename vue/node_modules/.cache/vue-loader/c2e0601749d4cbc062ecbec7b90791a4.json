{"remainingRequest":"/home/jocelyn/Documents/Projettest/Projetv2/Thermoformeuse/vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jocelyn/Documents/Projettest/Projetv2/Thermoformeuse/vue/src/components/Graphe.vue?vue&type=style&index=0&id=9676b53c&scoped=true&lang=css&","dependencies":[{"path":"/home/jocelyn/Documents/Projettest/Projetv2/Thermoformeuse/vue/src/components/Graphe.vue","mtime":1583845381502},{"path":"/home/jocelyn/Documents/Projettest/Projetv2/Thermoformeuse/vue/node_modules/css-loader/dist/cjs.js","mtime":1583835485638},{"path":"/home/jocelyn/Documents/Projettest/Projetv2/Thermoformeuse/vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1583835488874},{"path":"/home/jocelyn/Documents/Projettest/Projetv2/Thermoformeuse/vue/node_modules/postcss-loader/src/index.js","mtime":1583835486514},{"path":"/home/jocelyn/Documents/Projettest/Projetv2/Thermoformeuse/vue/node_modules/vuetify-loader/lib/loader.js","mtime":1583835489018},{"path":"/home/jocelyn/Documents/Projettest/Projetv2/Thermoformeuse/vue/node_modules/cache-loader/dist/cjs.js","mtime":1583835485378},{"path":"/home/jocelyn/Documents/Projettest/Projetv2/Thermoformeuse/vue/node_modules/vue-loader/lib/index.js","mtime":1583835488874}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpzdmd7CiAgbWFyZ2luOiAyNXB4Owp9CnBhdGh7CiAgZmlsbDogbm9uZTsKICBzdHJva2U6ICM3NkJGOEE7CiAgc3Ryb2tlLXdpZHRoOiAzcHg7Cn0K"},{"version":3,"sources":["Graphe.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Graphe.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <svg>\n  </svg>\n</template>\n\n<script>\nimport * as d3 from 'd3';\nexport default {\n  name: 'vue-line-chart',\n  data: () => ({\n      data: [300, 108, 280, 170, 230, 242],\n      timer: undefined,\n      nb_zones: undefined,\n      temp_seuils: [300, 200, 300, 300, 300, 250],\n      margeX: 30,\n      margeY: 20,\n      Largeur_graphe: undefined,\n      Hauteur_graphe: undefined,\n      Espacement_barres: 10,\n      Largeur_barres: undefined,\n      tab_zones: undefined,\n      AxeX: undefined,\n      AxeY: undefined,\n      svg: undefined,\n      temp_ok: undefined,\n      temp_pas_ok: undefined,\n      // line: '',\n    }),\n  mounted() {\n    this.nb_zones = this.data.length;\n    this.Largeur_graphe = this.nb_zones*100 + this.margeX;\n    this.Hauteur_graphe = d3.max(this.temp_seuils) + 100;\n    // console.log(\"a\");\n    this.Largeur_barres = this.Largeur_graphe/this.nb_zones;\n    this.tab_zones = this.creer_tab_zones();\n    this.createGraph();\n    this.timer = setInterval(this.changeData, 1000);\n  },\n  destroyed: function(){\n    clearInterval(this.timer);\n  },\n  watch:{\n    data: function(){\n      // console.log('a');\n      // this.createGraph();\n    },\n  },\n  methods: {\n    changeData(){\n      // console.log(\"ok\");\n      // for (let i = 0; i<this.data.length; i++){\n      //   this.data[i] = Math.floor((Math.random() * 100) + 100);\n      // }\n      let data_to_send = {\"type\": \"get\"};\n      let headers = {'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'POST, GET, PUT, OPTIONS, DELETE',\n            'Access-Control-Allow-Headers': 'Access-Control-Allow-Methods, Access-Control-Allow-Origin, Origin, Accept, Content-Type',\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n}\n\n      fetch(\"http://localhost:3000/temperature\", {\n        method: 'post',\n        headers,\n        body: JSON.stringify(data_to_send)\n\n      })\n      .then(res=> res.json())\n      .then(data => {\n        console.log(JSON.stringify(data));\n      });\n\n\n    },\n    creer_tab_zones(){\n      var tab = [];\n      for(var i = 1; i <= this.nb_zones; i++){\n        tab.push(\"zone \" + i);\n      }\n      return tab;\n    },\n    createGraph(){\n      var svg = this.svg;\n      var Largeur_barres = this.Largeur_barres;\n      var Largeur_graphe = this.Largeur_graphe;\n      var margeX = this.margeX;\n      var Hauteur_graphe = this.Hauteur_graphe;\n      var margeY = this.margeY;\n      var AxeX = this.AxeX;\n      var AxeY = this.AxeY;\n      var Espacement_barres = this.Espacement_barres;\n\n      AxeY = d3.scaleLinear()\n      .domain([Hauteur_graphe,0])\n      .range([0,Hauteur_graphe]);\n\n\n      AxeX = d3.scaleBand()\n          .domain(this.tab_zones)\n          .range([0,Largeur_graphe]);\n      svg = d3.select('svg')\n          .attr(\"width\", Largeur_graphe+margeX)\n          .attr(\"height\", Hauteur_graphe);\n      this.temp_ok = this.temp_bleues();\n      this.temp_pas_ok = this.temp_rouges();\n      svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\"+margeX+\",\"+ -margeY +\")\")\n      .call(d3.axisLeft(AxeY));\n\n      svg\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\"+ margeX +\",\"+(Hauteur_graphe-margeY)+\")\")\n      .call(d3.axisBottom(AxeX));\n\n      svg.selectAll(\"rect\")\n          .data(this.temp_pas_ok)\n          .enter()\n          .append(\"rect\")\n          .attr(\"fill\", \"red\")\n          .attr(\"y\", function(d) {\n               return Hauteur_graphe - d;\n          })\n          .attr(\"x\", function() {\n              return Espacement_barres;\n          })\n          .attr(\"height\", function(d) {\n              return d;\n          })\n          .attr(\"width\", Largeur_barres - Espacement_barres)\n          .attr(\"transform\", function (d, i) {\n              var translate = [(Largeur_barres * i) + margeX, -margeY];\n              return \"translate(\"+ translate +\")\";\n          });\n      // console.log(this.temp_ok);\n\n      svg.selectAll(\"graphe_rouge\")\n        .data(this.temp_ok)\n        .enter()\n        .append(\"rect\")\n        .attr(\"fill\", \"steelblue\")\n        .attr(\"y\", function(d) {\n             return Hauteur_graphe - d;\n        })\n        .attr(\"x\", function() {\n            return Espacement_barres;\n        })\n        .attr(\"height\", function(d) {\n            return d;\n        })\n        .attr(\"width\", Largeur_barres - Espacement_barres)\n        .attr(\"transform\", function (d, i) {\n            var translate = [(Largeur_barres * i) + margeX, -margeY];\n            return \"translate(\"+ translate +\")\";\n      });\n    },\n    temp_bleues(){\n    var tab = [];\n    for(var i = 0; i < this.nb_zones; i++){\n        if(this.data[i] <= this.temp_seuils[i]){\n            tab.push(this.data[i]);\n        }\n        else{\n            tab.push(this.temp_seuils[i]);\n        }\n    }\n    return tab;\n    },\n    temp_rouges(){\n      var tab = [];\n      for(var i = 0; i < this.nb_zones; i++){\n          if(this.data[i] > this.temp_seuils[i]){\n              tab.push(this.data[i]);\n          }\n          else{\n              tab.push(0);\n          }\n      }\n      return tab;\n    },\n  },\n};\n</script>\n\n<style scoped>\n  svg{\n    margin: 25px;\n  }\n  path{\n    fill: none;\n    stroke: #76BF8A;\n    stroke-width: 3px;\n  }\n</style>\n"]}]}